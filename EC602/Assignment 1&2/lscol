#!/usr/bin/env python
# Copyright 2021 Xiaopeng Huang xphuang@bu.edu

import os, string, math

files = os.listdir()

thelowerletters = string.ascii_lowercase
theupperletters = string.ascii_uppercase
thedigits = string.digits

def ignore_all(x, keep_these=thelowerletters+theupperletters+thedigits+'$'):
    # ignore symbols
    keepers = [let for let in x if let in keep_these]
    # ignore capitalization
    lower_keepers = [str.lower(let) for let in keepers]
    return "".join(lower_keepers)

def ignore_symbols(x, keep_these=thelowerletters+theupperletters+thedigits+'$'):
    # ignore symbols
    keepers = [let for let in x if let in keep_these]
    return "".join(keepers)

def capitalization_sort(x):
    # still need to ignore the symbols and sort by capitalization
    x = ignore_symbols(x, keep_these=thelowerletters+theupperletters+thedigits+'$')
    x_order = ''
    for let in x:
        order = ord(let)
        # sort uppercase after lowercase
        if 64 < ord(let) < 91:
            order = ord(let) + 33
        x_order += str(order)
    return x_order

def symbols_sort(x):
    x_order = ''
    for let in x:
        order = ord(let)
        # symbols after digits/letters in ASCII format should be order-changed
        if 31 < order < 36:
            order = ord(let) - 22
            x_order += '0'+str(order)
        if 36 < order < 48:
            order = ord(let) - 22
            x_order += '0'+str(order)
        if 57 < order < 65:
            order = ord(let) - 32
            x_order += '0'+str(order)
        if 90 < order < 97:
            order = ord(let) - 58
            x_order += '0'+str(order)
        if 122 < order < 127:
            order = ord(let) - 84
            x_order += '0'+str(order)
        x_order += str(order)
    return x_order

def complicated(x):
    return(ignore_all(x, keep_these=thelowerletters+theupperletters+thedigits+'$'), capitalization_sort(x), symbols_sort(x), x)

files.sort(key = complicated)

newfiles = []

# hidden files
for file in files:
    if file[0] != '.':
        newfiles.append(file)

terminal_size = os.get_terminal_size()

columns = terminal_size[0]

i = len(newfiles)+1

taken_length = 0

while columns >= taken_length:
    # rows of the output
    i = i-1

    if i == 0:
        break

    # columns of the output
    y = math.ceil(len(newfiles) / i)

    sliced_files = []

    # slice files into different columns
    for yy in range(0, y):
        sliced_files.append(newfiles[yy*i:(yy+1)*i])

    max_length = []

    # get the maximumn length of each column
    for subfiles in sliced_files:
        max_length.append(len(max(subfiles, key = len)))

    # total length taken by the output
    taken_length = sum(max_length)+2*(y)

i = i+1

y = math.ceil(len(newfiles) / i)

sliced_files = []

for yy in range(0, y):
    sliced_files.append(newfiles[yy*i:(yy+1)*i])

max_length = []

for subfiles in sliced_files:
    max_length.append(len(max(subfiles, key = len)))

taken_length = sum(max_length)+2*(y)

# print(sliced_files)
# print(i)
# print(y)

for ii in range(0, i):
    for yyy in range(0, y):
        if yyy == 0: # the first column
            print(sliced_files[yyy][ii], end = "")
        else:
            try:
                if yyy == y-1: # the last column
                    print(" "*(max_length[yyy-1]-len(sliced_files[yyy-1][ii]))+"  ", sliced_files[yyy][ii])
                else: # middle columns
                    print(" "*(max_length[yyy-1]-len(sliced_files[yyy-1][ii]))+"  ", sliced_files[yyy][ii], end = "")
            except: # the last column may not be fully filled
                print("")        
